
import java.awt.Dimension;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/**
 * Filter of user input in text filds
 */
class MyDocumentFilter extends DocumentFilter {
    private final String bannedSymbols = "[^0123456789.-]";
    
    @Override
    public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
        string = string.replaceAll(bannedSymbols, "");
        super.insertString(fb, offset, string, attr);
    }

    @Override
    public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
        text = text.replaceAll(bannedSymbols, "");
        super.replace(fb, offset, length, text, attrs);
    }
}

public class Solution extends javax.swing.JFrame {
    private Functions[] functions;                                                // Array of all functions
    private Functions integrand;                                                  // Function for integration
    private double nPrecision, nLimit;                                            // Variables for save text fields values
    private double resultSimpson, resultLaguerre;                                 // Results of methods
    
    final double[][] Laguerre_x = {                                               // Roots of the Laguerre polynoms
        {0.585786, 3.414214},
        {0.415775, 2.294280, 6.289945},
        {0.322548, 1.745761, 4.536620, 9.395071},
        {0.263560, 1.413403, 3.596426, 7.085810, 12.640801}
    };
    
    final double[][] Laguerre_A = {                                               // Coefs for the Gauss-Laguerre quadrature
        {8.535533e-01, 1.464466e-01},
        {7.110930e-01, 2.785177e-01, 1.038926e-02},
        {6.031541e-01, 3.574187e-01, 3.888790e-02, 5.392947e-04},
        {5.217556e-01, 3.986668e-01, 7.594245e-02, 3.611759e-03, 2.336997e-05}
    };

    public Solution() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelSubtitle = new javax.swing.JLabel();
        panelSource = new javax.swing.JPanel();
        labelFunction = new javax.swing.JLabel();
        comboFunction = new javax.swing.JComboBox<>();
        labelIntegral = new javax.swing.JLabel();
        textIntegral = new javax.swing.JTextArea();
        bthShowIntegrand = new javax.swing.JButton();
        labelDifference = new javax.swing.JLabel();
        editDifference = new javax.swing.JTextField();
        panelSimpson = new javax.swing.JPanel();
        labelPrecision = new javax.swing.JLabel();
        editPrecision = new javax.swing.JTextField();
        labelLimit = new javax.swing.JLabel();
        editLimit = new javax.swing.JTextField();
        btnIntegrateSimpson = new javax.swing.JButton();
        scrollSimpson = new javax.swing.JScrollPane();
        textSimpson = new javax.swing.JTextArea();
        checkSegments = new javax.swing.JCheckBox();
        spinnerSegments = new javax.swing.JSpinner();
        panelLaguerre = new javax.swing.JPanel();
        labelNodes = new javax.swing.JLabel();
        spinnerNodes = new javax.swing.JSpinner();
        btnIntegrateLaguerre = new javax.swing.JButton();
        scrollLaguerre = new javax.swing.JScrollPane();
        textLaguerre = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Integration");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(0, 0, 204));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Comparison of numerical integration methods");

        labelSubtitle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelSubtitle.setForeground(new java.awt.Color(102, 0, 0));
        labelSubtitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSubtitle.setText("Newton-Cotes formulas (Simpson's rule) vs. Gauss-Laguerre quadrature");

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelSubtitle, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
                    .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addComponent(labelTitle)
                .addGap(6, 6, 6)
                .addComponent(labelSubtitle))
        );

        panelSource.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelFunction.setText("Source function:");

        comboFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFunctionActionPerformed(evt);
            }
        });

        labelIntegral.setText("Integral:");

        textIntegral.setEditable(false);
        textIntegral.setColumns(30);
        textIntegral.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        textIntegral.setRows(3);

        bthShowIntegrand.setText("Show the integrand");
        bthShowIntegrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthShowIntegrandActionPerformed(evt);
            }
        });

        labelDifference.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelDifference.setForeground(new java.awt.Color(0, 0, 153));
        labelDifference.setText("|F(NC) - F(GL)| = ");

        editDifference.setEditable(false);
        editDifference.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editDifference.setForeground(new java.awt.Color(0, 0, 153));
        editDifference.setText("0.0");

        javax.swing.GroupLayout panelSourceLayout = new javax.swing.GroupLayout(panelSource);
        panelSource.setLayout(panelSourceLayout);
        panelSourceLayout.setHorizontalGroup(
            panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSourceLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addComponent(labelFunction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(labelIntegral))
                    .addComponent(labelDifference))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textIntegral, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(editDifference))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bthShowIntegrand)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSourceLayout.setVerticalGroup(
            panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSourceLayout.createSequentialGroup()
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(textIntegral, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelSourceLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelIntegral, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelSourceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bthShowIntegrand)))
                .addGap(8, 8, 8)
                .addGroup(panelSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDifference)
                    .addComponent(editDifference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSimpson.setBorder(javax.swing.BorderFactory.createTitledBorder(" Simpson's rule: "));

        labelPrecision.setText("Precision:");

        editPrecision.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editPrecision.setText("0.001");
        editPrecision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editPrecisionFocusLost(evt);
            }
        });
        editPrecision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPrecisionActionPerformed(evt);
            }
        });

        labelLimit.setText("a:");

        editLimit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editLimit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editLimitFocusLost(evt);
            }
        });
        editLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLimitActionPerformed(evt);
            }
        });

        btnIntegrateSimpson.setText("Integrate");
        btnIntegrateSimpson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntegrateSimpsonActionPerformed(evt);
            }
        });

        textSimpson.setColumns(20);
        textSimpson.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        textSimpson.setRows(5);
        scrollSimpson.setViewportView(textSimpson);

        checkSegments.setText("use number of segments:");

        spinnerSegments.setModel(new javax.swing.SpinnerNumberModel(10, 5, 50, 5));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, checkSegments, org.jdesktop.beansbinding.ELProperty.create("${selected}"), spinnerSegments, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout panelSimpsonLayout = new javax.swing.GroupLayout(panelSimpson);
        panelSimpson.setLayout(panelSimpsonLayout);
        panelSimpsonLayout.setHorizontalGroup(
            panelSimpsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSimpsonLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(labelPrecision)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkSegments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerSegments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIntegrateSimpson)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(scrollSimpson)
        );
        panelSimpsonLayout.setVerticalGroup(
            panelSimpsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSimpsonLayout.createSequentialGroup()
                .addGroup(panelSimpsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIntegrateSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkSegments)
                    .addComponent(spinnerSegments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollSimpson, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelLaguerre.setBorder(javax.swing.BorderFactory.createTitledBorder(" Gauss–Laguerre quadratures: "));

        labelNodes.setText("Number of nodes:");

        spinnerNodes.setModel(new javax.swing.SpinnerNumberModel(3, 2, 5, 1));

        btnIntegrateLaguerre.setText("Integrate");
        btnIntegrateLaguerre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntegrateLaguerreActionPerformed(evt);
            }
        });

        textLaguerre.setColumns(20);
        textLaguerre.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        textLaguerre.setRows(5);
        scrollLaguerre.setViewportView(textLaguerre);

        javax.swing.GroupLayout panelLaguerreLayout = new javax.swing.GroupLayout(panelLaguerre);
        panelLaguerre.setLayout(panelLaguerreLayout);
        panelLaguerreLayout.setHorizontalGroup(
            panelLaguerreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLaguerreLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(labelNodes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(250, 250, 250)
                .addComponent(btnIntegrateLaguerre)
                .addContainerGap(25, Short.MAX_VALUE))
            .addComponent(scrollLaguerre)
        );
        panelLaguerreLayout.setVerticalGroup(
            panelLaguerreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLaguerreLayout.createSequentialGroup()
                .addGroup(panelLaguerreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLaguerreLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelLaguerreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerNodes)))
                    .addComponent(btnIntegrateLaguerre, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollLaguerre, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelSource, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(panelSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelLaguerre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelLaguerre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Draw the integrand graph in separate window
     */
    private void draw() {
        final int count = 100;
        final double a = 0, b = 25;
        double h = (b - a) / (count-1);
        
        String name = integrand.getName();
        
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries series = new XYSeries(name);

        series.add( a, integrand.f(a) );
        for (int i = 1; i < count; i++) {
            double x = a + i * h;
            series.add( x, integrand.f(x) );
        }
        
        dataset.addSeries(series);
    
        JFreeChart jFreeChart = ChartFactory.createXYLineChart(name, "x", name, dataset, PlotOrientation.VERTICAL, true, false, false);
        
        XYPlot xyPlot = (XYPlot) jFreeChart.getPlot();
        xyPlot.setDomainCrosshairVisible(true);
        xyPlot.setRangeCrosshairVisible(true);
        
        ChartPanel CP = new ChartPanel(jFreeChart);

        JFrame frame = new JFrame("The graph of: " + integrand.getName());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.getContentPane().add(CP);
        frame.setPreferredSize(new Dimension(700, 700));
        frame.pack();
        frame.setVisible(true);          
    }
    
    /**
     * Create the integrand as result of: exp(-x) * f(x)
     */
    private void createIntegrand(Functions func) {
        integrand = new Functions() {
            @Override
            public String getName() {
                return "exp(-x)*(" + func.getName() + ")";
            }
            
            @Override
            public double getLimit() {
                return func.getLimit();
            }

            @Override
            public double f(double x) {
                return Math.exp(-x) * func.f(x);
            }
        };
    }
    
    /**
     * Show difference between results of both methods
     */
    private void showDifference() {
        editDifference.setText( "" + Math.abs(resultSimpson - resultLaguerre) );
    }
    
    /**
     * Core method of calculating the integral via Simpson's rule
     */
    private double simpson(double a, double b, int n) {
        double m = 2 * n;
        double h = (b-a) / m;
        double I2 = 0;
        double I4 = integrand.f(a + h);
        
        for(int i = 1; i <= m/2-1; i++) {
            I2 += integrand.f(a + 2*i*h);
            I4 += integrand.f(a + (2*i+1)*h);
        }
        return h/3 * ( integrand.f(a) + 2*I2 + 4*I4 + integrand.f(b) );
    }
    
    /**
     * Calculate the integral via Simpson's rule with defined precision
     */
    private double simpsonWithAccuracy(double a, double b) {
        int segments = 2, i = 1;
        double I1 = 0, I2, x;
        do {
            I2 = simpson(a,b,segments);                     // Calc the integral on [a,b]
            x = Math.abs(I2 - I1) / 15;                     // Runge rule (if we choose 'points *= 2', for 'points++' have to use x = Math.abs(I2 - I1))
            textSimpson.append( String.format("   %2d). segments = %d:\n", i, segments) );
            textSimpson.append( String.format("        I(%d) = %f\n", i, I2) );
            textSimpson.append( String.format("        | I(%d) - I(%d) | / 15 = %f\n", i, i-1, x) );
            I1 = I2;
            i++;
            segments *= 2;
        } while (x > nPrecision);
        return I2;
    }
    
    /**
     * Calculate the integral via Simpson's rule
     */
    private void calcSimpson() {
        final double delta = 1;
        double a = 0, b = nLimit;
        double F = 0, I;
        int step = 1, segments = 0;
        boolean withAccuracy;
        
        textSimpson.setText( "=== Calculating F by using Simpson's rule ===\n" );
        
        if ( !checkSegments.isSelected() ) {
            withAccuracy = true;
            textSimpson.append ( "=== (with achievement of given accuracy): ===\n\n" );
        } else {
            withAccuracy = false;
            segments = (int) spinnerSegments.getValue();
            textSimpson.append ( String.format("=== (with separation of the interval into %d segments): ===\n\n", segments) );
        }
        
        do {
            textSimpson.append( String.format("%2d. ...on interval [ %.1f; %.1f ): \n", step++, a, b) );
            I = withAccuracy ? simpsonWithAccuracy(a, b-nPrecision) : simpson(a, b-nPrecision, segments);       // b-nPrecision - cause calc on [a,b)
            F += I;
            textSimpson.append("I = " + I);
            textSimpson.append("\nF = " + F + "\n\n");
            
            a = b;
            b += delta;
        } while (Math.abs(I) > nPrecision);
        
        resultSimpson = F;
        showDifference();
    }
    
    /**
     * Calculate the integral via Gauss-Laguerre quadratures
     */
    private void calcLaguerre() {
        int n = (int) spinnerNodes.getValue();
        
        textLaguerre.setText( "=== Calculating F by using Gauss-Laguerre quadratures ===\n" );
        textLaguerre.append ( "=== (number of nodes = " + n + "): ===\n\n");
        for (int i = 0; i < n; i++)
            textLaguerre.append("x(" + (i+1) + ") = " + Laguerre_x[n-2][i] + "\n");
        
        textLaguerre.append("\n");
        
        for (int i = 0; i < n; i++)
            textLaguerre.append("A(" + (i+1) + ") = " + Laguerre_A[n-2][i] + "\n");
        
        double F = 0;
        Functions selectedFunction = functions[ comboFunction.getSelectedIndex() ];
        for (int i = 0; i < n; i++) {
            double xi = Laguerre_x[n-2][i];
            double Ai = Laguerre_A[n-2][i];
            F +=  Ai * selectedFunction.f(xi);
        }
        textLaguerre.append("\nF = " + F);
        resultLaguerre = F;
        showDifference();
    }
    
    /**
     * Check the value of the precision text field
     */
    private void checkPrecision() {
        try {
            double x = Double.parseDouble(editPrecision.getText());
            nPrecision = x;
        } catch (NumberFormatException e) {
            editPrecision.setText("" + nPrecision);
        }
    }
    
    /**
     * Check the value of the limit text field
     */
    private void checkLimit() {
        try {
            double x = Double.parseDouble(editLimit.getText());
            nLimit = x;
        } catch (NumberFormatException e) {
            editLimit.setText("" + nLimit);
        }
    }
    
    /**
     * Exit
     */
    private void closeProgram(java.awt.AWTEvent evt) {
        int reply = JOptionPane.showConfirmDialog(this, "Are you really want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION)
            System.exit(0);
    }
    
    /**
     * Initial actions on run
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        final int functionsCount = 4;
        
        // Fill array of the functions
        functions = new Functions[functionsCount];
        functions[0] = new f1();
        functions[1] = new f2();
        functions[2] = new f3();
        functions[3] = new f4();
        
        // Form combo box from the names of the functions
        String[] comboList = new String[functionsCount];
        for (int i = 0; i < functionsCount; i++) 
            comboList[i] = "f(x) = " + functions[i].getName();
        comboFunction.setModel(new DefaultComboBoxModel<>(comboList));
        comboFunction.setSelectedIndex(0);
        // ===
        
        // Set filter to text fields
        ((AbstractDocument) editPrecision.getDocument()).setDocumentFilter(new MyDocumentFilter());
        ((AbstractDocument) editLimit.getDocument()).setDocumentFilter(new MyDocumentFilter());
        
        comboFunctionActionPerformed(null);
        
        checkPrecision();
        checkLimit();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeProgram(evt);
    }//GEN-LAST:event_formWindowClosing

    private void comboFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFunctionActionPerformed
        createIntegrand( functions[comboFunction.getSelectedIndex()] );
        
        textIntegral.setText("   +∞\n");
        textIntegral.append ("F = ∫" + integrand.getName() + "dx\n");
        textIntegral.append ("    0");
        
        editLimit.setText("" + integrand.getLimit());
        textSimpson.setText("");
        textLaguerre.setText("");
        
        resultSimpson = 0;
        resultLaguerre = 0;
        showDifference();
    }//GEN-LAST:event_comboFunctionActionPerformed

    private void btnIntegrateSimpsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntegrateSimpsonActionPerformed
        calcSimpson();
    }//GEN-LAST:event_btnIntegrateSimpsonActionPerformed

    private void btnIntegrateLaguerreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntegrateLaguerreActionPerformed
        calcLaguerre();
    }//GEN-LAST:event_btnIntegrateLaguerreActionPerformed

    private void bthShowIntegrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthShowIntegrandActionPerformed
        draw();
    }//GEN-LAST:event_bthShowIntegrandActionPerformed

    private void editPrecisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPrecisionActionPerformed
        checkPrecision();
    }//GEN-LAST:event_editPrecisionActionPerformed

    private void editPrecisionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editPrecisionFocusLost
        checkPrecision();
    }//GEN-LAST:event_editPrecisionFocusLost

    private void editLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLimitActionPerformed
        checkLimit();
    }//GEN-LAST:event_editLimitActionPerformed

    private void editLimitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editLimitFocusLost
        checkLimit();
    }//GEN-LAST:event_editLimitFocusLost

    // <editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bthShowIntegrand;
    private javax.swing.JButton btnIntegrateLaguerre;
    private javax.swing.JButton btnIntegrateSimpson;
    private javax.swing.JCheckBox checkSegments;
    private javax.swing.JComboBox<String> comboFunction;
    private javax.swing.JTextField editDifference;
    private javax.swing.JTextField editLimit;
    private javax.swing.JTextField editPrecision;
    private javax.swing.JLabel labelDifference;
    private javax.swing.JLabel labelFunction;
    private javax.swing.JLabel labelIntegral;
    private javax.swing.JLabel labelLimit;
    private javax.swing.JLabel labelNodes;
    private javax.swing.JLabel labelPrecision;
    private javax.swing.JLabel labelSubtitle;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelLaguerre;
    private javax.swing.JPanel panelSimpson;
    private javax.swing.JPanel panelSource;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JScrollPane scrollLaguerre;
    private javax.swing.JScrollPane scrollSimpson;
    private javax.swing.JSpinner spinnerNodes;
    private javax.swing.JSpinner spinnerSegments;
    private javax.swing.JTextArea textIntegral;
    private javax.swing.JTextArea textLaguerre;
    private javax.swing.JTextArea textSimpson;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
